
yrgo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000246  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000246  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000275  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  00000283  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013e0  00000000  00000000  00000363  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007be  00000000  00000000  00001743  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000061d  00000000  00000000  00001f01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  00002520  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000222  00000000  00000000  00002670  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000261  00000000  00000000  00002892  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00002af3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000001c4  000001c4  00000238  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002b94  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    0000003c  000000f2  000000f2  00000166  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.read_pot1 00000024  0000012e  0000012e  000001a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.led1    00000014  00000188  00000188  000001fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.led2    00000014  0000019c  0000019c  00000210  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.led3    00000014  000001b0  000001b0  00000224  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.led     00000072  00000080  00000080  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.setup_p1 00000020  00000152  00000152  000001c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_fini 00000002  000001cc  000001cc  00000240  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__dummy_funcs_on_exit 00000002  000001ce  000001ce  00000242  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__dummy_simulator_exit 00000002  000001d0  000001d0  00000244  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.exit    00000016  00000172  00000172  000001e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text._Exit   00000004  000001c8  000001c8  0000023c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
   8:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
   c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  10:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  14:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  18:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  1c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  20:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  24:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  28:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  2c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  30:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  34:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  38:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  3c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  40:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  44:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  48:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  4c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  50:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  54:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  58:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  5c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  60:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
  64:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  78:	0c 94 b9 00 	jmp	0x172	; 0x172 <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

000001c4 <__bad_interrupt>:
 1c4:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

000000f2 <main>:
#include <stdbool.h>
#include <stdio.h>

int main(void)
{
    setup_p1();
  f2:	0e 94 a9 00 	call	0x152	; 0x152 <setup_p1>
    7       111     896 - 1023
    */
        uint8_t pot_value = 0;
    while(1) {
        /*Läser av och skalar ner pot-värdet så vi får ett värde mellan 0 - 7*/
        pot_value = read_pot1()/128;
  f6:	0e 94 97 00 	call	0x12e	; 0x12e <read_pot1>
  fa:	88 0f       	add	r24, r24
  fc:	89 2f       	mov	r24, r25
  fe:	88 1f       	adc	r24, r24
 100:	99 0b       	sbc	r25, r25
 102:	91 95       	neg	r25
        
        /*Här används bitmanipulation för att "plocka ut" de tre olika bitarna som skall
        tända/släcka aktuell led för att visa det binära talet*/
        led(3,(pot_value & 0b00000001));
 104:	ec 01       	movw	r28, r24
 106:	dd 27       	eor	r29, r29
 108:	61 e0       	ldi	r22, 0x01	; 1
 10a:	80 ff       	sbrs	r24, 0
 10c:	60 e0       	ldi	r22, 0x00	; 0
 10e:	83 e0       	ldi	r24, 0x03	; 3
 110:	0e 94 40 00 	call	0x80	; 0x80 <__data_load_end>
        led(2,(pot_value & 0b00000010));
 114:	61 e0       	ldi	r22, 0x01	; 1
 116:	c1 ff       	sbrs	r28, 1
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	82 e0       	ldi	r24, 0x02	; 2
 11c:	0e 94 40 00 	call	0x80	; 0x80 <__data_load_end>
        led(1,(pot_value & 0b00000100));
 120:	61 e0       	ldi	r22, 0x01	; 1
 122:	c2 ff       	sbrs	r28, 2
 124:	60 e0       	ldi	r22, 0x00	; 0
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	0e 94 40 00 	call	0x80	; 0x80 <__data_load_end>
 12c:	e4 cf       	rjmp	.-56     	; 0xf6 <main+0x4>

Disassembly of section .text.read_pot1:

0000012e <read_pot1>:
    ADCSRA = (1 << ADIF);
    return;
}

uint16_t read_pot1() {
    ADMUX = ((1 << REFS0) | POT1);
 12e:	80 e4       	ldi	r24, 0x40	; 64
 130:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    ADCSRA = ((1 << ADEN) | (1 << ADSC) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2));
 134:	87 ec       	ldi	r24, 0xC7	; 199
 136:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    while ((ADCSRA & (1 << ADIF)) == 0) ;
 13a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 13e:	84 ff       	sbrs	r24, 4
 140:	fc cf       	rjmp	.-8      	; 0x13a <read_pot1+0xc>
    ADCSRA = (1 << ADIF);
 142:	80 e1       	ldi	r24, 0x10	; 16
 144:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    return ADC;
 148:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 14c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 150:	08 95       	ret

Disassembly of section .text.led1:

00000188 <led1>:
void led2_toggle(void) {
    if(is_led2_on()){
        led2(false);
    }
    else {
        led2(true);
 188:	88 23       	and	r24, r24
 18a:	21 f0       	breq	.+8      	; 0x194 <led1+0xc>
 18c:	85 b1       	in	r24, 0x05	; 5
 18e:	82 60       	ori	r24, 0x02	; 2
 190:	85 b9       	out	0x05, r24	; 5
 192:	08 95       	ret
 194:	85 b1       	in	r24, 0x05	; 5
 196:	8d 7f       	andi	r24, 0xFD	; 253
 198:	85 b9       	out	0x05, r24	; 5
 19a:	08 95       	ret

Disassembly of section .text.led2:

0000019c <led2>:
 19c:	88 23       	and	r24, r24
 19e:	21 f0       	breq	.+8      	; 0x1a8 <led2+0xc>
 1a0:	8b b1       	in	r24, 0x0b	; 11
 1a2:	80 64       	ori	r24, 0x40	; 64
 1a4:	8b b9       	out	0x0b, r24	; 11
 1a6:	08 95       	ret
 1a8:	8b b1       	in	r24, 0x0b	; 11
 1aa:	8f 7b       	andi	r24, 0xBF	; 191
 1ac:	8b b9       	out	0x0b, r24	; 11
 1ae:	08 95       	ret

Disassembly of section .text.led3:

000001b0 <led3>:
    }
}

void led3(bool active) {
    if (active) {
 1b0:	88 23       	and	r24, r24
 1b2:	21 f0       	breq	.+8      	; 0x1bc <led3+0xc>
        PORTD |= (1 << LED3);    
 1b4:	8b b1       	in	r24, 0x0b	; 11
 1b6:	80 62       	ori	r24, 0x20	; 32
 1b8:	8b b9       	out	0x0b, r24	; 11
 1ba:	08 95       	ret
    } else {
        PORTD &= ~(1 << LED3);        
 1bc:	8b b1       	in	r24, 0x0b	; 11
 1be:	8f 7d       	andi	r24, 0xDF	; 223
 1c0:	8b b9       	out	0x0b, r24	; 11
 1c2:	08 95       	ret

Disassembly of section .text.led:

00000080 <led>:
void led2_toggle(void) {
    if(is_led2_on()){
        led2(false);
    }
    else {
        led2(true);
  80:	66 23       	and	r22, r22
  82:	d9 f0       	breq	.+54     	; 0xba <led+0x3a>
  84:	81 30       	cpi	r24, 0x01	; 1
  86:	19 f4       	brne	.+6      	; 0x8e <led+0xe>
  88:	0e 94 c4 00 	call	0x188	; 0x188 <led1>
  8c:	08 95       	ret
  8e:	82 30       	cpi	r24, 0x02	; 2
  90:	21 f4       	brne	.+8      	; 0x9a <led+0x1a>
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	0e 94 ce 00 	call	0x19c	; 0x19c <led2>
  98:	08 95       	ret
  9a:	83 30       	cpi	r24, 0x03	; 3
  9c:	21 f4       	brne	.+8      	; 0xa6 <led+0x26>
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <led3>
  a4:	08 95       	ret
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	0e 94 c4 00 	call	0x188	; 0x188 <led1>
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	0e 94 ce 00 	call	0x19c	; 0x19c <led2>
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <led3>
  b8:	08 95       	ret
  ba:	81 30       	cpi	r24, 0x01	; 1
  bc:	21 f4       	brne	.+8      	; 0xc6 <led+0x46>
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	0e 94 c4 00 	call	0x188	; 0x188 <led1>
  c4:	08 95       	ret
  c6:	82 30       	cpi	r24, 0x02	; 2
  c8:	21 f4       	brne	.+8      	; 0xd2 <led+0x52>
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	0e 94 ce 00 	call	0x19c	; 0x19c <led2>
  d0:	08 95       	ret
  d2:	83 30       	cpi	r24, 0x03	; 3
  d4:	21 f4       	brne	.+8      	; 0xde <led+0x5e>
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <led3>
  dc:	08 95       	ret
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	0e 94 c4 00 	call	0x188	; 0x188 <led1>
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	0e 94 ce 00 	call	0x19c	; 0x19c <led2>
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <led3>
  f0:	08 95       	ret

Disassembly of section .text.setup_p1:

00000152 <setup_p1>:
/************************************************************************/

void setup_p1(void) {

    /*Sets PINs for PORTB as outputs*/
    DDRB = (1 << LED1);
 152:	82 e0       	ldi	r24, 0x02	; 2
 154:	84 b9       	out	0x04, r24	; 4
    
    /*Sets PINs for PORTC as outputs*/
    DDRC = (1 << 3);
 156:	88 e0       	ldi	r24, 0x08	; 8
 158:	87 b9       	out	0x07, r24	; 7
    
    /*Sets PINs for PORTD as outputs*/
    DDRD &= ~(1 << BUTTON2);
 15a:	8a b1       	in	r24, 0x0a	; 10
 15c:	8f 77       	andi	r24, 0x7F	; 127
 15e:	8a b9       	out	0x0a, r24	; 10
    DDRD &= ~(1 << BUTTON3);
 160:	8a b1       	in	r24, 0x0a	; 10
 162:	8f 7e       	andi	r24, 0xEF	; 239
 164:	8a b9       	out	0x0a, r24	; 10
    DDRD = 0b001101111;
 166:	8f e6       	ldi	r24, 0x6F	; 111
 168:	8a b9       	out	0x0a, r24	; 10
    
    /*Turns off the numeric display*/
    PORTD |= 0b00001111;
 16a:	8b b1       	in	r24, 0x0b	; 11
 16c:	8f 60       	ori	r24, 0x0F	; 15
 16e:	8b b9       	out	0x0b, r24	; 11
 170:	08 95       	ret

Disassembly of section .text.__dummy_fini:

000001cc <_fini>:
 1cc:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000001ce <__funcs_on_exit>:
 1ce:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000001d0 <__simulator_exit>:
 1d0:	08 95       	ret

Disassembly of section .text.exit:

00000172 <exit>:
 172:	ec 01       	movw	r28, r24
 174:	0e 94 e7 00 	call	0x1ce	; 0x1ce <__funcs_on_exit>
 178:	0e 94 e6 00 	call	0x1cc	; 0x1cc <_fini>
 17c:	ce 01       	movw	r24, r28
 17e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <__simulator_exit>
 182:	ce 01       	movw	r24, r28
 184:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <_Exit>

Disassembly of section .text._Exit:

000001c8 <_Exit>:
 1c8:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
